{
    "./docs/README.md": "# Project Documentation: todo-app\\n\\nThis documentation contains detailed explanation of the key modules within the **todo-app** project.\\n\\n## Modules\\n\\n- [Server Main](./server/main.md): Entry point of the application that initializes the HTTP server.\\n- [REST Handler](./transport/rest/handler.md): Handles HTTP requests and responses for tasks.\\n- [REST Router](./transport/rest/router.md): Configures routes of the application.\\n- [Task Service](./service/task_service.md): Provides business logic for managing tasks.\\n- [Task Repository](./storage/task_repository.md): Defines data storage and retrieval for tasks.\\n\\nConsult each linked module for specific details.", "./docs/server/main.md": "# Module: Server Main\\n\\nThis module is the entry point for the **todo-app** application. It initializes and starts the HTTP server.\\n\\n## Overview\\n\\nThe `main.go` file configures an HTTP router and starts the application.\\n\\n### Relevant Code\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"net/http\\\"\\n\\t\\\"github.com/username/todo-app/internal/transport/rest\\\"\\n)\\n\\nfunc main() {\\n\\trouter := rest.NewRouter()\\n\\tlog.Println(\\\"Server starting on :8080\\\")\\n\\tlog.Fatal(http.ListenAndServe(\\\":8080\\\", router))\\n}\\n```\\n\\n## Key Components\\n\\n- **Router:** Configured using `rest.NewRouter()`.\\n- **Server Port:** The application listens on port `:8080`.\",\n  \"./docs/transport/rest/handler.md\": \"# Module: REST Handler\\n\\nThis module defines the handler functions for processing HTTP requests related to tasks.\\n\\n## Overview\\n\\nThe `handler.go` file implements the `TaskHandler` struct and its methods for handling task-related HTTP operations.\\n\\n### Relevant Code\\n\\n```go\\npackage rest\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"net/http\\\"\\n\\t\\\"github.com/username/todo-app/internal/service\\\"\\n)\\n\\ntype TaskHandler struct {\\n\\tservice service.TaskService\\n}\\n\\nfunc NewTaskHandler(s service.TaskService) *TaskHandler {\\n\\treturn &TaskHandler{service: s}\\n}\\n\\nfunc (h *TaskHandler) CreateTask(w http.ResponseWriter, r *http.Request) {\\n\\tvar task struct {\\n\\t\\tTitle string `json:\\\"title\\\"`\\n\\t}\\n\\tif err := json.NewDecoder(r.Body).Decode(&task); err != nil {\\n\\t\\thttp.Error(w, err.Error(), http.StatusBadRequest)\\n\\t\\treturn\\n\\t}\\n\\tw.WriteHeader(http.StatusCreated)\\n\\tjson.NewEncoder(w).Encode(map[string]string{\\\"status\\\": \\\"created\\\"})\\n}\\n```\\n\\n## Key Methods\\n\\n- **`CreateTask`:** Handles creation of new tasks through HTTP POST requests.",  "./docs/transport/rest/router.md": "# Module: REST Router\\n\\nThis module defines and configures the HTTP routes using the Gorilla Mux library.\\n\\n## Overview\\n\\nThe `router.go` file establishes the routing table for the application.\\n\\n### Relevant Code\\n\\n```go\\npackage rest\\n\\nimport (\\n\\t\\\"github.com/gorilla/mux\\\"\\n\\t\\\"github.com/username/todo-app/internal/service\\\"\\n)\\n\\nfunc NewRouter() *mux.Router {\\n\\trouter := mux.NewRouter()\\n\\t\\n\\ttaskService := service.NewTaskService(nil) // nil instead of real repository for example purposes\\n\\ttaskHandler := NewTaskHandler(taskService)\\n\\t\\n\\trouter.HandleFunc(\\\"/tasks\\\", taskHandler.CreateTask).Methods(\\\"POST\\\")\\n\\t\\n\\treturn router\\n}\\n```\\n\\n## Endpoints\\n\\n- **`POST /tasks`:** Endpoint routed to the `CreateTask` method for creating a new task.", "./docs/service/task_service.md": "# Module: Task Service\\n\\nThis module provides the business logic essential for managing tasks.\\n\\n## Overview\\n\\nThe `task_service.go` file defines a `TaskService` struct and methods that encapsulate task-related operations.\\n\\n### Relevant Code\\n\\n```go\\npackage service\\n\\nimport \\\"github.com/username/todo-app/internal/storage\\\"\\n\\ntype TaskService struct {\\n\\trepo storage.TaskRepository\\n}\\n\\nfunc NewTaskService(repo storage.TaskRepository) *TaskService {\\n\\treturn &TaskService{repo: repo}\\n}\\n\\nfunc (s *TaskService) CreateTask(title string) error {\\n\\treturn nil\\n}\\n```\\n\\n## Methods\\n\\n- **`CreateTask`:** Placeholder function for task creation logic. Calls the repository to save the task.",  "./docs/storage/task_repository.md": "# Module: Task Repository\\n\\nThis module defines the data storage and retrieval layer for tasks.\\n\\n## Overview\\n\\nThe `task_repository.go` file defines the interface and an in-memory implementation for storing tasks.\\n\\n### Relevant Code\\n\\n```go\\npackage storage\\n\\ntype TaskRepository interface {\\n\\tCreateTask(title string) error\\n}\\n\\n// InMemoryTaskRepository - Example implementation of TaskRepository\\ntype InMemoryTaskRepository struct {\\n\\ttasks []string\\n}\\n\\nfunc NewInMemoryTaskRepository() *InMemoryTaskRepository {\\n\\treturn &InMemoryTaskRepository{tasks: make([]string, 0)}\\n}\\n\\nfunc (r *InMemoryTaskRepository) CreateTask(title string) error {\\n\\tr.tasks = append(r.tasks, title)\\n\\treturn nil\\n}\\n```\\n\\n## Components\\n\\n- **Interface:** `TaskRepository` defines a contract for task storage.\\n- **Implementation:** `InMemoryTaskRepository` provides an in-memory storage solution."
}