{
  "messages": [
    {
      "role": "system",
      "content": "Ты опытный team-lead разработчик с 20-летним опытом написания подробной документации кода.Ты пишешь документацию в markdown формате, создавая новый .md файл для каждого модуля.Структура документации может быть любой."
    },
    {
      "role": "system",
      "content": "1) В каждом запросе гарантированно будет структура проекта, к которому нужна документацияПример структуры проекта:{  \"project\": \"todo-app,  \"files\": [    \"cmd/server/main.go\",    \"internal/transport/rest/handler.go\",    \"internal/transport/rest/router.go\",    \"internal/service/task_service.go\",    \"internal/storage/task_repository.go\",    \"go.mod\"  ]}files содержит пути по всех модулей проекта от корневой папки2) Составлять документацию нужно каждый раз для всего проекта заново3) Чтобы получить содердимое файла нужно использовать get_file, указав путь до него от корневой папки4) Считай, что вся документация хранится в каталоге docs5) В ответ присылай json, где ключ - путь до .md файла в docs, а значение - содердимое этого файлаПример валидного ответа:{    \"./docs/README.md\": \"Текст документации с ссылками на другие файлы документации\",    \"./docs/src/CLIENT.md\": \"Документация по модулю client.go\",    \"./docs/src/SCHEMA.md\": \"Документация по модулю schema.go\"}"
    },
    {
      "role": "user",
      "content": "{   \"project\": \"todo-app\",   \"files\": [     \"go.mod\",     \"cmd/server/main.go\",     \"internal/transport/rest/handler.go\",     \"internal/transport/rest/router.go\",     \"internal/service/task_service.go\",     \"internal/storage/task_repository.go\"   ] }"
    },
    {
      "tool_calls": [
        {
          "id": "call_fjXtxZMBt41UDlk9KTZ0XCB9",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"go.mod\"}"
          }
        },
        {
          "id": "call_ule3TjRdgEuCYL7BNZSA7Ecg",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"cmd/server/main.go\"}"
          }
        },
        {
          "id": "call_NLLSAWzbgW59zmRH8lUVAgym",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"internal/transport/rest/handler.go\"}"
          }
        },
        {
          "id": "call_LMCJysVDBmKG3PErLvNDL4jm",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"internal/transport/rest/router.go\"}"
          }
        },
        {
          "id": "call_LaulRgbxkCE2qm817l98u3Dy",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"internal/service/task_service.go\"}"
          }
        },
        {
          "id": "call_ktlBGQpofCRYAYR0CM3jz02r",
          "type": "function",
          "function": {
            "name": "get_file",
            "arguments": "{\"file_path\": \"internal/storage/task_repository.go\"}"
          }
        }
      ],
      "role": "assistant",
      "content": null
    },
    {
      "role": "tool",
      "tool_call_id": "call_fjXtxZMBt41UDlk9KTZ0XCB9",
      "content": "module github.com/username/todo-app\n\ngo 1.21\n\nrequire (\n    github.com/gorilla/mux v1.8.0\n)"
    },
    {
      "role": "tool",
      "tool_call_id": "call_ule3TjRdgEuCYL7BNZSA7Ecg",
      "content": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/username/todo-app/internal/transport/rest\"\n)\n\nfunc main() {\n\trouter := rest.NewRouter()\n\tlog.Println(\"Server starting on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}"
    },
    {
      "role": "tool",
      "tool_call_id": "call_NLLSAWzbgW59zmRH8lUVAgym",
      "content": "package rest\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/username/todo-app/internal/service\"\n)\n\ntype TaskHandler struct {\n\tservice service.TaskService\n}\n\nfunc NewTaskHandler(s service.TaskService) *TaskHandler {\n\treturn &TaskHandler{service: s}\n}\n\nfunc (h *TaskHandler) CreateTask(w http.ResponseWriter, r *http.Request) {\n\tvar task struct {\n\t\tTitle string `json:\"title\"`\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&task); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\t\n\t// Здесь бы вызывали h.service.CreateTask(...)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(map[string]string{\"status\": \"created\"})\n}"
    },
    {
      "role": "tool",
      "tool_call_id": "call_LMCJysVDBmKG3PErLvNDL4jm",
      "content": "package rest\n\nimport (\n\t\"github.com/gorilla/mux\"\n\t\"github.com/username/todo-app/internal/service\"\n)\n\nfunc NewRouter() *mux.Router {\n\trouter := mux.NewRouter()\n\t\n\ttaskService := service.NewTaskService(nil) // nil вместо реального репозитория для примера\n\ttaskHandler := NewTaskHandler(taskService)\n\t\n\trouter.HandleFunc(\"/tasks\", taskHandler.CreateTask).Methods(\"POST\")\n\t\n\treturn router\n}"
    },
    {
      "role": "tool",
      "tool_call_id": "call_LaulRgbxkCE2qm817l98u3Dy",
      "content": "package service\n\nimport \"github.com/username/todo-app/internal/storage\"\n\ntype TaskService struct {\n\trepo storage.TaskRepository\n}\n\nfunc NewTaskService(repo storage.TaskRepository) *TaskService {\n\treturn &TaskService{repo: repo}\n}\n\nfunc (s *TaskService) CreateTask(title string) error {\n\t// Здесь бы вызывали s.repo.CreateTask(...)\n\treturn nil\n}"
    },
    {
      "role": "tool",
      "tool_call_id": "call_ktlBGQpofCRYAYR0CM3jz02r",
      "content": "package storage\n\ntype TaskRepository interface {\n\tCreateTask(title string) error\n}\n\n// InMemoryTaskRepository - пример реализации\ntype InMemoryTaskRepository struct {\n\ttasks []string\n}\n\nfunc NewInMemoryTaskRepository() *InMemoryTaskRepository {\n\treturn &InMemoryTaskRepository{tasks: make([]string, 0)}\n}\n\nfunc (r *InMemoryTaskRepository) CreateTask(title string) error {\n\tr.tasks = append(r.tasks, title)\n\treturn nil\n}"
    }
  ]
}
